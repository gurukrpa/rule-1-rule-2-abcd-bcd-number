// Test script to verify Rule1Page BCD display fix// Run this in browser console after navigating to Rule1Pageconsole.log('🧪 RULE1PAGE BCD DISPLAY TEST');console.log('==============================');async function testRule1BCDDisplay() {  try {    console.log('🔍 Checking if we are on Rule1Page...');        // Check if we're on Rule1Page by looking for its distinctive elements    const rule1Header = document.querySelector('h2:contains("Rule-1 ABCD/BCD Analysis")') ||                        document.querySelector('[class*="Rule1"]') ||                       document.querySelector('h2[class*="text-2xl"]:contains("Rule-1")');        if (!rule1Header) {      console.log('❌ Not on Rule1Page. Please navigate to Rule1Page first.');      console.log('💡 Steps: Select user → Click Rule-1 button on newest eligible date');      return false;    }        console.log('✅ On Rule1Page, starting BCD display test...');        // Look for ABCD/BCD badges in the tables    const abcdBadges = document.querySelectorAll('.bg-green-100');    const bcdBadges = document.querySelectorAll('.bg-blue-100');        console.log('📊 BADGE COUNTS:');    console.log(`🟢 ABCD badges found: ${abcdBadges.length}`);    console.log(`🔵 BCD badges found: ${bcdBadges.length}`);        if (abcdBadges.length > 0) {      console.log('🟢 ABCD BADGES CONTENT:');      abcdBadges.forEach((badge, index) => {        const content = badge.textContent.trim();        console.log(`  ${index + 1}. "${content}"`);      });    }        if (bcdBadges.length > 0) {      console.log('🔵 BCD BADGES CONTENT:');      bcdBadges.forEach((badge, index) => {        const content = badge.textContent.trim();        console.log(`  ${index + 1}. "${content}"`);      });    } else {      console.log('⚠️ No BCD badges found. This could indicate:');      console.log('   1. No BCD numbers qualified (expected if ABCD takes priority)');      console.log('   2. BCD logic still has issues');      console.log('   3. No suitable data patterns for BCD');    }        // Check console logs for BCD analysis    console.log('🔍 MANUAL VERIFICATION STEPS:');    console.log('1. Look for D-day columns (blue background)');    console.log('2. Check if any show blue BCD badges');    console.log('3. Verify format: "bcd-hl-1-su-ta" (element-number-planet-sign)');    console.log('4. Open browser DevTools Console to see analysis logs');        // Look for tables and D-day columns specifically    const tables = document.querySelectorAll('table');    console.log(`📋 Found ${tables.length} table(s) on the page`);        tables.forEach((table, tableIndex) => {      const headers = table.querySelectorAll('th');      const dDayHeaders = Array.from(headers).filter(th =>         th.textContent.includes('(D)') || th.classList.contains('bg-blue-100')      );            if (dDayHeaders.length > 0) {        console.log(`📊 Table ${tableIndex + 1}: Found ${dDayHeaders.length} D-day column(s)`);                // Look for cells in D-day columns that have badges        const dDayColumns = table.querySelectorAll('td.bg-blue-50');        let badgeCount = 0;                dDayColumns.forEach(cell => {          const badges = cell.querySelectorAll('.bg-green-100, .bg-blue-100');          if (badges.length > 0) {            badgeCount += badges.length;            badges.forEach(badge => {              console.log(`  📍 Badge: "${badge.textContent.trim()}"`);            });          }        });                console.log(`  🏷️ Total badges in D-day columns: ${badgeCount}`);      }    });        return true;      } catch (error) {    console.error('❌ Error during Rule1Page BCD test:', error);    return false;  }}// Enhanced jQuery-like selector for text contentif (!document.querySelector.toString().includes('contains')) {  const originalQuerySelector = document.querySelector;  document.querySelector = function(selector) {    if (selector.includes(':contains(')) {      const [base, text] = selector.split(':contains(');      const searchText = text.slice(1, -2); // Remove ("...")      const elements = document.querySelectorAll(base || '*');      return Array.from(elements).find(el => el.textContent.includes(searchText)) || null;    }    return originalQuerySelector.call(this, selector);  };}// Run the testtestRule1BCDDisplay().then(success => {  if (success) {    console.log('✅ Rule1Page BCD test completed');    console.log('🎯 Check the results above to verify BCD functionality');  } else {    console.log('❌ Rule1Page BCD test failed or not on correct page');  }});