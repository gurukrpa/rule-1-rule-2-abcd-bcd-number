// src/utils/dateManagement.js
// Utility for managing dates in Supabase for seamless Planets Analysis

import { cleanSupabaseService } from '../services/CleanSupabaseService.js';

export class DateManagementService {
  
  /**
   * Check if a specific date has complete data (Excel + Hour entry)
   * @param {string} userId - User ID
   * @param {string} targetDate - Date to check (YYYY-MM-DD)
   * @returns {Promise<{hasData: boolean, hasExcel: boolean, hasHour: boolean}>}
   */
  static async checkDateData(userId, targetDate) {
    try {
      const hasExcel = await cleanSupabaseService.hasExcelData(userId, targetDate);
      const hasHour = await cleanSupabaseService.hasHourEntry(userId, targetDate);
      
      return {
        hasData: hasExcel && hasHour,
        hasExcel,
        hasHour
      };
    } catch (error) {
      console.error(`Error checking data for ${targetDate}:`, error);
      return {
        hasData: false,
        hasExcel: false,
        hasHour: false,
        error: error.message
      };
    }
  }

  /**
   * Auto-populate missing date by copying from the most recent available date
   * @param {string} userId - User ID
   * @param {string} targetDate - Date to create (YYYY-MM-DD)
   * @returns {Promise<{success: boolean, message: string}>}
   */
  static async autoPopulateMissingDate(userId, targetDate) {
    try {
      console.log(`ðŸ”§ [DateManagement] Auto-populating ${targetDate}...`);
      
      // Check if data already exists
      const currentStatus = await this.checkDateData(userId, targetDate);
      if (currentStatus.hasData) {
        return {
          success: true,
          message: `Date ${targetDate} already has complete data`
        };
      }

      // Get available dates to use as template
      const userDates = await cleanSupabaseService.getUserDates(userId);
      if (userDates.length === 0) {
        return {
          success: false,
          message: 'No existing data found to use as template'
        };
      }

      // Use the latest available date as template
      const sortedDates = userDates.sort((a, b) => new Date(a) - new Date(b));
      const templateDate = sortedDates[sortedDates.length - 1];
      
      console.log(`ðŸ“‹ [DateManagement] Using ${templateDate} as template for ${targetDate}`);

      // Copy Excel data if missing
      if (!currentStatus.hasExcel) {
        const templateExcelData = await cleanSupabaseService.getExcelData(userId, templateDate);
        if (templateExcelData) {
          const newExcelData = {
            ...templateExcelData,
            upload_date: targetDate,
            metadata: {
              ...templateExcelData.metadata,
              autoGenerated: true,
              sourceDate: templateDate,
              targetDate: targetDate,
              createdAt: new Date().toISOString(),
              note: `Auto-generated from ${templateDate} for seamless Planets Analysis`
            }
          };

          await cleanSupabaseService.saveExcelData(userId, targetDate, newExcelData);
          console.log(`âœ… [DateManagement] Excel data copied to ${targetDate}`);
        }
      }

      // Copy Hour entry if missing
      if (!currentStatus.hasHour) {
        const templateHourData = await cleanSupabaseService.getHourEntry(userId, templateDate);
        if (templateHourData) {
          const newHourData = {
            ...templateHourData,
            date: targetDate,
            metadata: {
              ...templateHourData.metadata,
              autoGenerated: true,
              sourceDate: templateDate,
              targetDate: targetDate,
              createdAt: new Date().toISOString(),
              note: `Auto-generated from ${templateDate} for seamless Planets Analysis`
            }
          };

          await cleanSupabaseService.saveHourEntry(userId, targetDate, newHourData);
          console.log(`âœ… [DateManagement] Hour entry copied to ${targetDate}`);
        }
      }

      // Verify the operation
      const finalStatus = await this.checkDateData(userId, targetDate);
      if (finalStatus.hasData) {
        return {
          success: true,
          message: `Successfully auto-populated ${targetDate} using template from ${templateDate}`
        };
      } else {
        return {
          success: false,
          message: `Failed to auto-populate ${targetDate} - verification failed`
        };
      }

    } catch (error) {
      console.error(`[DateManagement] Error auto-populating ${targetDate}:`, error);
      return {
        success: false,
        message: `Error: ${error.message}`
      };
    }
  }

  /**
   * Check if a date sequence (A, B, C, D) has all required data for Rule2 analysis
   * @param {string} userId - User ID  
   * @param {string[]} sequence - Array of 4 dates [aDay, bDay, cDay, dDay]
   * @returns {Promise<{isComplete: boolean, missingDates: string[], details: Object}>}
   */
  static async checkSequenceData(userId, sequence) {
    const [aDay, bDay, cDay, dDay] = sequence;
    const results = {};
    const missingDates = [];

    for (const date of sequence) {
      const status = await this.checkDateData(userId, date);
      results[date] = status;
      if (!status.hasData) {
        missingDates.push(date);
      }
    }

    return {
      isComplete: missingDates.length === 0,
      missingDates,
      details: results
    };
  }

  /**
   * Auto-fill missing dates in a sequence to ensure seamless analysis
   * @param {string} userId - User ID
   * @param {string[]} sequence - Array of 4 dates [aDay, bDay, cDay, dDay]
   * @returns {Promise<{success: boolean, message: string, addedDates: string[]}>}
   */
  static async autoFillSequence(userId, sequence) {
    try {
      const sequenceCheck = await this.checkSequenceData(userId, sequence);
      
      if (sequenceCheck.isComplete) {
        return {
          success: true,
          message: 'Sequence already complete',
          addedDates: []
        };
      }

      console.log(`ðŸ”§ [DateManagement] Auto-filling missing dates: ${sequenceCheck.missingDates.join(', ')}`);
      
      const addedDates = [];
      const results = [];

      for (const missingDate of sequenceCheck.missingDates) {
        const result = await this.autoPopulateMissingDate(userId, missingDate);
        results.push(result);
        if (result.success) {
          addedDates.push(missingDate);
        }
      }

      const allSuccessful = results.every(r => r.success);
      
      return {
        success: allSuccessful,
        message: allSuccessful 
          ? `Successfully auto-filled ${addedDates.length} missing dates: ${addedDates.join(', ')}`
          : `Partially completed: ${addedDates.length}/${sequenceCheck.missingDates.length} dates added`,
        addedDates
      };

    } catch (error) {
      console.error('[DateManagement] Error auto-filling sequence:', error);
      return {
        success: false,
        message: `Error: ${error.message}`,
        addedDates: []
      };
    }
  }

  /**
   * Get manual instructions for adding missing date data
   * @param {string} targetDate - Date that needs to be added
   * @returns {Object} Instructions for manual data entry
   */
  static getManualInstructions(targetDate) {
    return {
      steps: [
        'Go to your application and navigate to the ABCD-number page',
        `Click the "Add Date" button and enter: ${targetDate}`,
        'Upload an Excel file containing planets data for this date',
        'Add Hour Entry by selecting planets for HR 1-6',
        'Click "Save" to store the data',
        'Return to Planets Analysis and test the date'
      ],
      expectedResult: `Analysis Date: ${new Date(targetDate).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' })}`,
      note: 'After adding the data manually, the Planets Analysis should show the correct date instead of falling back to older dates.'
    };
  }
}

export default DateManagementService;
